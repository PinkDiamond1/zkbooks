<zk xmlns:w="http://www.zkoss.org/2005/zk/client" xmlns:h="native">
    <h:h1>Override a Widget Method</h:h1>
    <label>
        <attribute w:name="setValue">
            function (value) {
                this.$setValue(value); //call the original method
                if (this.desktop) {
                    this._flag = !this._flag;
                    this.setStyle('background:'+(this._flag ? 'red':'green'));
                }
            }
        </attribute>
    </label>
    disable an event listener - disable key handling for a combobox
    <combobox w:doKeyDown_="zk.$void">
        <comboitem label="1-1"/>
        <comboitem label="2-1"/>
    </combobox>


    <h:h1>Override a Default Widget Method in zul</h:h1>
    <label id="labelone" value="label one"/>
    <label id="labeltwo" value="label two"/>
    <script defer="true">
        var oldSV = zul.wgt.Label.prototype.setValue;
        zul.wgt.Label.prototype.setValue = function (){
        arguments[0]="modified prototype"+arguments[0];
        oldSV.apply(this, arguments);
        }
    </script>
    <button label="change" onClick="labelone.setValue((new Date()).toString());labeltwo.setValue((new Date()).toString());"/>


    <h:h1>Override a Default Widget Method in JavaScript File</h:h1>
    <combobox>
        <comboitem label="item-1"/>
        <comboitem label="item-2"/>
        <comboitem label="item-3"/>
    </combobox>
    <script><![CDATA[
zk.afterLoad('zul.inp', function() { //specify zk widget package name
    var exWidget = {};
    zk.override(zul.inp.ComboWidget.prototype, exWidget, { //specify zk full widget name
        doClick_: function(e){
            exWidget.doClick_.apply(this, arguments); //call the original widget's overridden function
            //implement your custom logic
        },
    });

});
    ]]></script>
</zk>
